# -*- coding: utf-8 -*-
"""Exercise_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BkFBK0YWAQEq5BrvcA0MKuYLc9SNqnl0

# Exercise 1

## Class Initialization
"""

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:

    def __init__(self):
        self.head = None

    def traverse(self, node):
        while node:
            print(node.data, end=" -> ")
            node = node.next

class DoublyLinkedList:

    def __init__(self):
        self.head = None

    def traverse(self, node):
        while node:
            print(node.data, end=" -> ")
            node = node.next

class CircularLinkedList:

    def __init__(self):
        self.head = None

    def traverse(self, node):

        head = node

        while node:
            print(node.data, end=" -> ")
            node = node.next

            # Break to prevent infinite loop
            if node == head:
                break

"""#### 1. Create a Singly Linked list

- Each node should contain your name and your seatmates in your row
- Create at least 5 nodes
- Traverse all nodes
"""

linked_list = LinkedList()

linked_list.head = Node("iber")
node_b = Node("robbie")
node_c = Node("dhan")
node_d = Node("gelo")
node_e = Node("sir elizer")

linked_list.head.next = node_b
node_b.next = node_c
node_c.next = node_d
node_d.next = node_e
node_e.next = None

linked_list.traverse(linked_list.head)

"""#### 2. Create a Doubly Linked list

- Each node should contain your name and your seatmates in your row
- Create at least 5 nodes
- Traverse all nodes
"""

doubly_linked_list = DoublyLinkedList()

doubly_linked_list.head = Node("iber")
node_b = Node("robbie")
node_c = Node("dhan")
node_d = Node("gelo")
node_e = Node("sir elizer")

doubly_linked_list.head.next = node_b

node_b.prev = doubly_linked_list.head
node_b.next = node_c

node_c.prev = node_b
node_c.next = node_d

node_d.prev = node_c
node_d.next = node_e

node_e.prev = node_d
node_e.next = None

print("value of head is :", doubly_linked_list.head.data)

print("value of next to head is :", doubly_linked_list.head.next.data)

print("---")

print("value of node_b is :", node_b.data)

print("value of previous of node_b is :", node_b.prev.data)

print("value of next of node_b is :", node_b.next.data)

print("---")

print("value of node_c is :", node_c.data)

print("value of previous of node_c is :", node_c.prev.data)

print("value of next of node_c is :", node_c.next.data)

print("---")

print("value of node_d is :", node_d.data)

print("value of previous of node_d is :", node_d.prev.data)

print("value of next of node_d is :", node_d.next.data)

print("---")

print("value of node_e is :", node_e.data)

print("value of previous of node_e is :", node_e.prev.data)

"""#### 3. Create a Circular Linked list

- Each node should contain your name and your seatmates in your row
- Create at least 5 nodes
- Traverse all nodes
"""

circular_linked_list = CircularLinkedList()

circular_linked_list.head = Node("iber")
node_b = Node("robbie")
node_c = Node("dhan")
node_d = Node("gelo")
node_e = Node("sir elizer")


circular_linked_list.head.next = node_b
node_b.next = node_c
node_c.next = node_d
node_d.next = node_e
node_e.next = circular_linked_list.head

print("---")
print("value of head is :", circular_linked_list.head.data)

print("value of next to head is :", circular_linked_list.head.next.data)

print("---")

print("value of node_b is :", node_b.data)

print("value of next of node_b is :", node_b.next.data)

print("---")

print("value of node_c is :", node_c.data)

print("value of next of node_c is :", node_c.next.data)

print("---")

print("value of node_d is :", node_d.data)

print("value of next of node_d is :", node_d.next.data)

print("---")

print("value of node_e is :", node_e.data)

print("value of next of node_e is :", node_e.next.data)

print("---")

circular_linked_list.traverse(circular_linked_list.head)